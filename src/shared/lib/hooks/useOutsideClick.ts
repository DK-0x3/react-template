import { RefObject, useEffect, useRef } from 'react';
/**
 * React-—Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –≤–Ω–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.
 * üîπ Generic:
 * –•—É–∫ —è–≤–ª—è–µ—Ç—Å—è –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–º (`<T extends HTMLElement = HTMLElement>`), —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç
 * —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å `ref` –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π HTML-—ç–ª–µ–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, `HTMLDivElement`, `HTMLButtonElement`).
 *
 * @template T - –¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω ref (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é `HTMLElement`).
 *
 * @param {() => void} callback - –§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞.
 * @param {boolean} [skip=false] - –§–ª–∞–≥, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É.
 *   –ï—Å–ª–∏ `true`, —Ö—É–∫ –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å `callback`.
 * @param {string} [exceptionId] - ID —ç–ª–µ–º–µ–Ω—Ç–∞-–∏—Å–∫–ª—é—á–µ–Ω–∏—è. –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –≤–Ω—É—Ç—Ä–∏
 *   —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ –µ–≥–æ –ø–æ—Ç–æ–º–∫–æ–≤, `callback` –Ω–µ –≤—ã–∑–æ–≤–µ—Ç—Å—è.
 * @param {'click' | 'mousedown' | 'mouseup'} [eventType='mousedown'] - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è,
 *   –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è –∫–ª–∏–∫.
 *
 * @returns {RefObject<T>} ref - React-—Å—Å—ã–ª–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Å–∏—Ç—å –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç.
 *
 * @example
 * // –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
 * const ref = useOutsideClick<HTMLDivElement>(() => {
 *   console.log('–ö–ª–∏–∫ —Å–Ω–∞—Ä—É–∂–∏!');
 * });
 *
 * return <div ref={ref}>–ö–æ–Ω—Ç–µ–Ω—Ç</div>;
 *
 * @example
 * // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏)
 * const ref = useOutsideClick<HTMLDivElement>(
 *   () => setOpen(false),
 *   false,
 *   'open-modal-button'
 * );
 *
 * return (
 *   <>
 *     <button id="open-modal-button" onClick={() => setOpen(true)}>–û—Ç–∫—Ä—ã—Ç—å</button>
 *     {open && <div ref={ref}>–ú–æ–¥–∞–ª–∫–∞</div>}
 *   </>
 * );
 *
 * @example
 * // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ
 * const ref = useOutsideClick<HTMLDivElement>(
 *   () => console.log('Clicked outside!'),
 *   skip = isLoading // –ø–æ–∫–∞ –≥—Ä—É–∑–∏–º –¥–∞–Ω–Ω—ã–µ ‚Äî –∫–ª–∏–∫ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
 * );
 */
export const useOutsideClick = <
    T extends HTMLElement = HTMLElement
>(
		callback: () => void,
		skip: boolean = false,
		exceptionId?: string,
		eventType: 'click' | 'mousedown' | 'mouseup' = 'mousedown'
	): RefObject<T> => {
	const ref = useRef<T>(null as unknown as T);

	useEffect(() => {
		if (skip) return;

		const handleClickOutside = (event: MouseEvent) => {
			if (!ref.current) return;

			const target = event.target as Node;

			if (ref.current.contains(target)) return;

			if (exceptionId && document.getElementById(exceptionId)?.contains(target)) return;

			callback();
		};

		document.addEventListener(eventType, handleClickOutside);

		return () => {
			document.removeEventListener(eventType, handleClickOutside);
		};
	}, [callback, skip, exceptionId, eventType]);

	return ref;
};
