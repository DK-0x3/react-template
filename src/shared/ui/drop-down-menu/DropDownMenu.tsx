import classNames from 'classnames';
import React, { useEffect, useId, useRef, useState } from 'react';
import ReactDOM from 'react-dom';
import { useTranslation } from 'react-i18next';

import { useWindowSize } from '../../lib/hooks/useWindowSize';
import ChevronDown from './assets/ChevronDownIcon';
import styles from './DropDownListMenu.module.scss';
import DropDownMenuItem from './types/DropDownMenuItem';
import Placement from './types/Placement';

/**
 * –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ DropdownMenu
 *
 * @template ValueT - —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
 */
export interface DropDownMenuProps<ValueT> {
    /** –¢–µ–∫—Å—Ç –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏, –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π –º–µ–Ω—é */
    label?: React.ReactNode;
    /** –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é */
    items: DropDownMenuItem<ValueT>[];
    /** –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —ç–ª–µ–º–µ–Ω—Ç–∞ */
    onSelect?: (item: DropDownMenuItem<ValueT>) => void;
    /** –ü–æ–∑–∏—Ü–∏—è –º–µ–Ω—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–Ω–æ–ø–∫–∏: 'top' | 'bottom' | 'left' | 'right' */
    placement?: Placement;

    /** –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
    className?: string;
    style?: React.CSSProperties;
    /** –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è */
    buttonClassName?: string;
    buttonStyle?: React.CSSProperties;
    /** –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–µ–Ω—é */
    menuClassName?: string;
    menuStyle?: React.CSSProperties;
    /** –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é */
    itemClassName?: string;
    itemStyle?: React.CSSProperties;

    /** –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –º–µ–Ω—é */
    menuMinWidth?: number;

    /** –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–º–µ—Å—Ç–æ label –∏ –≤—ã–¥–µ–ª—è—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ */
    showSelectedItem?: boolean;
    selectedItemClassName?: string;

    /** –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ */
    initialSelectedItem?: DropDownMenuItem<ValueT>;

    /** –î–æ–ª–∂–Ω–∞ –ª–∏ —à–∏—Ä–∏–Ω–∞ –º–µ–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —à–∏—Ä–∏–Ω–µ –∫–Ω–æ–ø–∫–∏ */
    isMenuMatchButtonWidth?: boolean;
}


/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç DropdownMenu ‚Äî –≤—ã–ø–∞–¥–∞—é—â–µ–µ –º–µ–Ω—é —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏,
 * –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
 *
 * @template ValueT - —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é
 *
 * @example
 * ```tsx
 * const items = [
 *   { value: { id: 1 }, label: '–ü–µ—Ä–≤—ã–π', icon: <Icon1 /> },
 *   { value: { id: 2 }, label: '–í—Ç–æ—Ä–æ–π', disabled: true },
 * ];
 *
 * <DropdownMenu
 *   label="–í—ã–±–µ—Ä–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç"
 *   items={items}
 *   onSelect={(item) => console.log(item)}
 *   placement="bottom"
 * />
 * ```
 */
// üëá –í–Ω–µ—Å–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç

export const DropDownMenu = <ValueT,>({
	label = 'Menu',
	items,
	onSelect,
	placement = 'Bottom',

	className,
	style,
	buttonClassName,
	buttonStyle,
	menuClassName,
	menuStyle,
	itemClassName,
	itemStyle,

	menuMinWidth = 180,

	showSelectedItem = true,
	selectedItemClassName = '',
	initialSelectedItem,
	isMenuMatchButtonWidth = false,
}: DropDownMenuProps<ValueT>) => {
	const { t } = useTranslation();

	const [open, setOpen] = useState(false);
	const [menuPos, setMenuPos] = useState<{ top: number; left: number }>({ top: 0, left: 0 });
	const [selectedItem, setSelectedItem] = useState<DropDownMenuItem<ValueT> | null>(initialSelectedItem ?? null);
	const [selectedItemIndex, setSelectedItemIndex] = useState<number | null>(
		initialSelectedItem ? items.findIndex(i => i === initialSelectedItem) : null
	);
	const [buttonWidth, setButtonWidth] = useState<number | undefined>(undefined);

	const rootRef = useRef<HTMLDivElement | null>(null);
	const buttonRef = useRef<HTMLButtonElement | null>(null);
	const itemRefs = useRef<Array<HTMLButtonElement | null>>([]);
	const menuId = useId();

	const { width: windowWidth } = useWindowSize();

	// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
	useEffect(() => {
		const handleClickOutside = (e: MouseEvent) => {
			// –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –≤–Ω–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º, –Ω–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
			if (!rootRef.current?.contains(e.target as Node)) {
				// –î–∞–µ–º –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å onClick
				setTimeout(() => {
					setOpen(false);
				}, 0);
			}
		};

		document.addEventListener('click', handleClickOutside);
		return () => {
			document.removeEventListener('click', handleClickOutside);
		};
	}, []);

	// –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ Escape
	useEffect(() => {
		const onKey = (e: KeyboardEvent) => {
			if (e.key === 'Escape') {
				setOpen(false);
				buttonRef.current?.focus();
			}
		};
		if (open) document.addEventListener('keydown', onKey);
		return () => document.removeEventListener('keydown', onKey);
	}, [open]);

	// –†–∞—Å—á—ë—Ç –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
	useEffect(() => {
		if (open && buttonRef.current) {
			setButtonWidth(buttonRef.current.offsetWidth);

			const buttonRect = buttonRef.current.getBoundingClientRect();
			const scrollY = window.scrollY;
			const scrollX = window.scrollX;
			const menuEl = document.getElementById(menuId);

			if (!menuEl) return;

			// üëá –î–æ–∂–¥–µ–º—Å—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–∞–¥—Ä–∞, —á—Ç–æ–±—ã CSS width —É–∂–µ –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è
			requestAnimationFrame(() => {
				const menuRect = menuEl.getBoundingClientRect();
				const offset = 8;

				let top = 0, left = 0;

				switch (placement) {
				case 'Bottom':
					top = buttonRect.bottom + scrollY + offset;
					left = buttonRect.left + scrollX + buttonRect.width / 2 - menuRect.width / 2;
					break;
				case 'Top':
					top = buttonRect.top + scrollY - menuRect.height - offset;
					left = buttonRect.left + scrollX + buttonRect.width / 2 - menuRect.width / 2;
					break;
				case 'Left':
					top = buttonRect.top + scrollY + buttonRect.height / 2 - menuRect.height / 2;
					left = buttonRect.left + scrollX - menuRect.width - offset;
					break;
				case 'Right':
					top = buttonRect.top + scrollY + buttonRect.height / 2 - menuRect.height / 2;
					left = buttonRect.right + scrollX + offset;
					break;
				}

				const viewportWidth = window.innerWidth;
				const viewportHeight = window.innerHeight;

				if (left < 0) left = 4;
				if (left + menuRect.width > viewportWidth) left = viewportWidth - menuRect.width - 4;
				if (top < 0) top = 4;
				if (top + menuRect.height > viewportHeight + scrollY)
					top = viewportHeight + scrollY - menuRect.height - 4;

				setMenuPos({ top, left });
			});
		}
	}, [open, placement, menuId, buttonWidth, windowWidth]);

	const menuContent = (
		<ul
			id={menuId}
			role="menu"
			aria-label="Dropdown menu"
			className={classNames(
				styles.Menu,
				styles[`Placement${placement}`],
				menuClassName,
				{ [styles.Open]: open }
			)}
			style={{
				top: menuPos.top,
				left: menuPos.left,
				minWidth: menuMinWidth,
				width: isMenuMatchButtonWidth ? buttonWidth : undefined,
				...menuStyle,
			}}
		>
			{items.map((item, idx) => {
				const itemId = `dropdown-item-${idx}`;
				const isSelected = showSelectedItem && selectedItem && selectedItemIndex === idx;

				return (
					<li key={itemId} role="none">
						<button
							ref={(el) => void (itemRefs.current[idx] = el)}
							role="menuitem"
							type="button"
							aria-disabled={item.disabled || undefined}
							disabled={item.disabled}
							className={classNames(
								styles.Item,
								itemClassName,
								{
									[styles.Selected]: showSelectedItem && isSelected,
									[selectedItemClassName!]: showSelectedItem && isSelected && selectedItemClassName,
								}
							)}
							style={itemStyle}
							onClick={() => {
								if (item.disabled) return;
								setSelectedItem(item);
								setSelectedItemIndex(idx);
								onSelect?.(item);
								setOpen(false);
								buttonRef.current?.focus();
							}}
						>
							{item.icon && <span aria-hidden>{item.icon}</span>}
							<span>{typeof item.label === 'string' ? t(item.label) : item.label}</span>
						</button>
					</li>
				);
			})}
		</ul>
	);

	return (
		<div
			ref={rootRef}
			className={classNames(styles.Wrapper, className)}
			style={{ display: 'inline-block', ...style }}
		>
			<button
				ref={buttonRef}
				type="button"
				aria-haspopup="menu"
				aria-expanded={open}
				aria-controls={menuId}
				className={classNames(styles.MainButton, buttonClassName)}
				style={{ ...buttonStyle }}
				onClick={() => setOpen((p) => !p)}
			>
				{showSelectedItem && selectedItem
					? typeof selectedItem.label === 'string' ? t(selectedItem.label) : selectedItem.label
					: label}
				<ChevronDown rotated={open} />
			</button>

			{ReactDOM.createPortal(menuContent, document.body)}
		</div>
	);
};

